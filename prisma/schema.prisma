generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CONTRIBUTOR
  USER
}

enum NavItemAlignment {
  RIGHT
  LEFT
}

model User {
  id          String  @id @default(uuid())
  email       String  @unique
  name        String
  password    String
  blogPath    String  @default("/blog")
  blogEnabled Boolean @default(false)
  photo       String?
  role        Role    @default(USER)
  Blog        Blog[]
}

model NavigationItem {
  id           String           @id @default(uuid())
  Navigation   Navigation?      @relation(fields: [navigationId], references: [id])
  navigationId String?
  name         String
  href         String
  position     Int              @default(0)
  alignment    NavItemAlignment @default(RIGHT)
  newTab       Boolean          @default(false)
}

model Navigation {
  id        String           @id @default(uuid())
  brandName String
  navItems  NavigationItem[]
}

model PageSection {
  id        String   @id @default(uuid())
  content   String
  position  Int      @default(0)
  published Boolean  @default(false)
  page      Page?    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Page {
  id          String        @id @default(uuid())
  name        String        @unique
  slug        String
  title       String
  description String
  sections    PageSection[]
  published   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
}

model Blog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Post      Post[]
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  published Boolean  @default(false)
  thumbnail String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
